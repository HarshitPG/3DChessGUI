/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.5 public/models/rookb.glb
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";

export function Rook({ color, selected }) {
  const { nodes, materials } = useGLTF("models/kingb.glb");
  return (
    <group>
      <mesh
        geometry={nodes.Black_rook.geometry}
        material={materials["Material.001"]}
      >
        <meshStandardMaterial
          roughness={0.2}
          metalness={1}
          color={selected ? "green" : color === "w" ? "white" : "#9497a0"}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("models/kingb.glb");

import React from "react";
import { useSpring, animated } from "@react-spring/three";
import { Pawn } from "./Pwanb";
import { Knight } from "./Knightb";
import { Bitshop } from "./Bitshopb";
import { Rook } from "./Rookb";
import { Queen } from "./Queenb";
import { King } from "./Kingb";

const Figure = ({ figure, position, selected, isMoving, targetPosition }) => {
  const { pos } = useSpring({
    pos: isMoving
      ? [targetPosition.x, 0.45, -targetPosition.y]
      : [position.x, 0.45, position.y],
    config: { mass: 1, tension: 180, friction: 12 },
  });
  console.log("targetPosition", targetPosition.x, isMoving);

  const { hover } = useSpring({
    hover: selected ? 0.05 : 0,
    config: { mass: 1, tension: 180, friction: 12 },
  });

  const renderFigure = (Component) => (
    <animated.group position={pos}>
      <animated.group position-y={hover}>
        <Component color={figure.color} selected={selected} />
      </animated.group>
    </animated.group>
  );

  if (!figure) return null;

  switch (figure.type) {
    case "p":
      return renderFigure(Pawn);
    case "n":
      return renderFigure(Knight);
    case "b":
      return renderFigure(Bitshop);
    case "r":
      return renderFigure(Rook);
    case "q":
      return renderFigure(Queen);
    case "k":
      return renderFigure(King);
    default:
      return null;
  }
};

export default Figure;

import React from "react";
import Cell from "./Cell";
import Figure from "../components3d/figures/figure";

const Board = ({
  board,
  figures,
  onCellSelect,
  selectedCell,
  availableMoves,
  onFigureMove,
  rotation,
  position,
  movingPiece,
  targetPosition,
}) => {
  return (
    <group position={position} rotation={rotation}>
      {board.map((row, rowIndex) => (
        <React.Fragment key={rowIndex}>
          {row.map((cell, cellIndex) => (
            <Cell
              availableMoves={availableMoves}
              onFigureMove={onFigureMove}
              onCellSelect={onCellSelect}
              key={rowIndex.toString() + cellIndex.toString()}
              cell={cell}
              color={(cellIndex + rowIndex) % 2 === 0 ? "#d0dff4" : "#4b648a"}
              position={{ x: rowIndex, y: -cellIndex }}
            />
          ))}
        </React.Fragment>
      ))}
      {figures.map((row, rowIndex) => (
        <React.Fragment key={rowIndex}>
          {row.map(
            (figure, cellIndex) =>
              figure && (
                <Figure
                  key={rowIndex.toString() + cellIndex.toString()}
                  position={{ x: rowIndex, y: -cellIndex }}
                  selected={figure.square === selectedCell}
                  figure={figure}
                  isMoving={figure.square === movingPiece}
                  targetedX={rowIndex}
                  targetedY={-cellIndex}
                  targetPosition={
                    targetPosition || { x: rowIndex, y: -cellIndex }
                  }
                />
              )
          )}
        </React.Fragment>
      ))}
    </group>
  );
};

export default Board;
